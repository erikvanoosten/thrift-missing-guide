= Thrift specification - Remote Procedure Call
Erik van Oosten <e.vanoosten@grons.nl>
v1.0, 2016-09-27

The missing specification.

== Introduction

This document specifies the so far undocumented thrift RPC message exchange and the wire encoding of those messages in
the binary protocol and the more modern compact protocol. In addition, this document compares the binary protocol with
the compact protocol. Finally it describes the framed vs. unframed transport.

The information here is mostly based on the Java implementation in the Apache thrift library (version 0.9.1 and
0.9.3) and https://issues.apache.org/jira/browse/THRIFT-110[THRIFT-110 A more compact format].
Other implementation however, should behave the same.

For background on Thrift see the https://thrift.apache.org/static/files/thrift-20070401.pdf[Thrift white paper (pdf)].

.Copyright

Copyright (C) 2016 Erik van Oosten

This work is licensed under the
http://creativecommons.org/licenses/by-nc/3.0/[Creative Commons
Attribution-NonCommercial 3.0
Unported License].

.Contributions

I welcome feedback and contributions to this guide. You can find the
https://github.com/diwakergupta/thrift-missing-guide[source code]
over at http://github.com[GitHub]. Alternatively, you can file a
https://github.com/diwakergupta/thrift-missing-guide/issues[bug].

== Thrift Remote Procedure Call Message exchange

Both the binary protocol and the compact protocol assume a transport layer that exposes a bi-directional byte stream,
for example a TCP socket. Both use the following exchange:

. => Client sends a `Message` (type `Call` or `Oneway`). The TMessage contains some metadata and the name of the method
  to invoke.
. => Client sends method arguments (a struct defined by the generate code).
. <= Server sends a `Message` (type `Reply` or `Exception`) to start the response.
. <= Server sends a struct containing the method result or exception.

The pattern is a simple half duplex protocol where the parties alternate in sending a `Message` followed by a struct.
What these are is described below.

Although the standard Apache Thrift Java clients do not support pipelining (sending multiple requests without waiting
for an response), the standard Apache Thrift Java servers do support it.

=== Message

A *message* contains:

* _Name_, a string.
* _Message type_, a message types, one of `Call`, `Reply`, `Exception` and `Oneway`.
* _Sequence id_, a signed int32 integer.

The *sequence id* is a simple message id assigned by the client. The server will use the same sequence id in the
message of the response. The client uses this number to detect out of order responses. Each client has an int32 field
which is increased for each message. The sequence id simply wraps around when it overflows.

The *name* indicates the service method name to invoke. The server copies the name in the response message.

When the *multiplexed protocol* is used, the name contains the service name, a colon (`:`) and the method name. The
multiplexed protocol is not compatible with other protocols.

The *message type* indicates what kind of message is sent. Clients send requests with messages of type `Call` or
`Oneway` (step 1 in the protocol exchange). Servers send responses with messages of type `Exception` or `Reply` (step
3).

Type `Reply` is used when the service method completes normally. That is, it returns a value or it throws one of the
exceptions defined in the Thrift IDL file.

Type `Exception` is used for other exceptions. That is: when the service method throws an exception that is not declared
in the Thrift IDL file, or some other part of the Thrift stack throws an exception. For example when the server could
not encode or decode a message or struct.

In the Java implementation (0.9.3) there is different behavior for the synchronous and asynchronous server. In the async
server all exceptions are send as a `TApplicationException` (see 'Response struct' below). In the synchronous Java
implementation only (undeclared) exceptions that extend `TException` are send as a `TApplicationException`. Unchecked
exceptions lead to an immediate close of the connection.

Type `Oneway` is only used starting from Apache Thrift 0.9.3. Earlier versions do _not_ send messages of type `Oneway`,
even for service methods defined with the `oneway` modifier.

When client sends a request with type `Oneway`, the server must _not_ send a response (steps 3 and 4 are skipped). Note
that the Thrift IDL enforces a return type of `void` and does not allow exceptions for oneway services.

=== Request struct

The struct that follows the message of type `Call` or `Oneway` contains the arguments of the service method. The
argument ids correspond to the field ids. The name of the struct is the name of the method with `_args` appended.
For methods without arguments an struct is sent without fields.

=== Response struct

The struct that follows the message of type `Reply` are structs in which exactly 1 of the following fields is encoded:

* A field with name `success` and id `0`, used in case the method completed normally.
* An exception field, name and id are as defined in the `throws` clause in the Thrift IDL's service method definition.

When the message is of type `Exception` the struct is encoded as if it was declared by the following IDL:

....
exception TApplicationException {
  1: string message,
  2: i32 type
}
....

The following exception types are defined in the java implementation (0.9.3):

unknown (0):: used in case the type from the peer is unknown.
unknown method (1):: used in case the method requested by the client is unknown by the server.
invalid message type (2):: no usage was found.
wrong method name (3):: no usage was found.
bad sequence id (4):: used internally by the client to indicate a wrong sequence id in the response.
missing result (5):: used internally by the client to indicate a response without any field (result nor exception).
internal error (6):: used when the server throws an exception that is not declared in the Thrift IDL file.
protocol error (7):: used when something goes wrong during decoding. For example when a list is too long or a required field is missing.
invalid transform (8):: no usage was found.
invalid protocol (9):: no usage was found.
unsupported client type (10):: no usage was found.

==== Struct

A *struct* is a sequence of zero or more fields, followed by a stop field. Each field starts with a field header and
is followed by the encoded field value. The encoding can be summarized by the following BNF:

....
struct        ::= ( field-header field-value )* stop-field
field-header  ::= field-type field-id
....

Because each field header contains the field-id (as defined by the Thrift IDL file), the fields can be encoded in any
order. Thrift's type system is not extensible; you can only encode the primitive types and structs. Therefore it is also
possible to handle unknown fields while decoding; these are simply ignored. While decoding, the field type can be used to
determine how to decode the field value.

Note that the field name is not encoded so field renames in the IDL do not affect forward and backward compatibility.

The default Java implementation (Apache Thrift 0.9.1) has undefined behavior when it tries to decode a field that has
another field-type then what is expected. Theoretically this could be detected at the cost of some additional checking.
Other implementation may perform this check and then either ignore the field, return a protocol exception, or perform a
silent type cast.

A *union* is encoded exactly the same as a struct with the additional restriction that at most 1 field may be encoded.

An *exception* is encoded exactly the same as a struct.

include::rpc-spec-binary-protocol.asciidoc[]

include::rpc-spec-compact-protocol.asciidoc[]

== Protocol considerations

=== Comparing binary and compact protocol

The binary protocol is fairly simple and therefore easy to process. The compact protocol needs less bytes to send the
same data at the cost of additional processing. When bandwidth is a bottleneck, the compact protocol will be slightly faster.
When bandwidth is not a concern there is no advantage.

=== Compatibility

A server could automatically determine whether a client talks the binary protocol or the compact protocol by
investigating the first byte. If the value is `1000 0001` or `0000 0000` (assuming a name shorter then Â±16 MB) it is the
binary protocol. When the value is `1000 0010` it is talking the compact protocol.

=== Framed vs. unframed transport

The first thrift binary wire format was unframed. This means that information is sent out in a single stream of bytes.
With unframed transport the (generated) processors will read directly from the socket (though Apache Thrift does try to
grab all available bytes from the socket in a buffer when it can).

Later, Thrift introduced the framed transport.

With framed transport the full request and response (the message and the following struct) are first written to a
buffer. Then when the struct is complete (transport method `flush` is hijacked for this), the length of the buffer is
written to the socket first, followed by the buffered bytes. The combination is called a _frame_. On the receiver side
the complete frame is first read in a buffer before the message is passed to a processor.

The length prefix is a 4 byte signed int, send in network (big endian) order.
The following must be true: `0` <= length <= `16384000` (16M).

Framed transport was introduced to ease the implementation of async processors. An async processor is only invoked when
all data is received. Unfortunately, framed transport is not ideal for large messages as the entire frame stays in
memory until the message has been processed. In addition, the java implementation merges the incoming data to a single,
growing byte array. Every time the byte array is full it needs to be copied to a new larger byte array.

Framed and unframed transports are not compatible with each other.

== BNF notation used in this document

The following BNF notation is used:

* a plus `+` appended to an item represents repetition; the item is repeated 1 or more times
* a star `*` appended to an item represents optional repetition; the item is repeated 0 or more times
* a pipe `|` between items represents choice, the first matching item is selected
* parenthesis `(` and `)` are used for grouping multiple items
